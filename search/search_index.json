{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is a wiki where I store useful information that I find and links using MkDocs . The format and process to generate the wiki was taken from GitHub . Thanks very much Lyz-code!","title":"Introduction"},{"location":"contact/","text":"Create an issue in the Github if you wish to reach out.","title":"Contact"},{"location":"emojis/","text":"Curated list of emojis to copy paste. Angry \u00b6 (\u0482\u2323\u0300_\u2323\u0301) ( >\u0434<) \u0295\u2022\u0300o\u2022\u0301\u0294 \u30fd(\u2267\u0414\u2266)\u30ce \u1559(\u21c0\u2038\u21bc\u2036)\u1557 \u0669(\u256c\u0298\u76ca\u0298\u256c)\u06f6 Annoyed \u00b6 (>_<) Awesome \u00b6 ( \u00b7_\u00b7) ( \u00b7_\u00b7) --\u25a0-\u25a0 ( \u00b7_\u00b7)--\u25a0-\u25a0 (-\u25a0_\u25a0) YEAAAAAAAAAAAAAAAAAAAAAHHHHHHHHHHHH Conforting \u00b6 (\uff4f\u30fb_\u30fb)\u30ce\u201d(\u1d17_ \u1d17\u3002) Congratulations \u00b6 ( \u141b )\u0648 \uff3c\\ \u0669( \u141b )\u0648 /\uff0f Crying \u00b6 (\u2565\ufe4f\u2565) Excited \u00b6 (((o(*\uff9f\u25bd\uff9f*)o))) o(\u2267\u2207\u2266o) Dance \u00b6 (~\u203e\u25bf\u203e)~ ~(\u203e\u25bf\u203e)~ ~(\u203e\u25bf\u203e~) \u250c(\u30fb\u3002\u30fb)\u2518 \u266a \u2514(\u30fb\u3002\u30fb)\u2510 \u266a \u250c(\u30fb\u3002\u30fb)\u2518 \u01aa(\u02d8\u2323\u02d8)\u2510 \u01aa(\u02d8\u2323\u02d8)\u0283 \u250c(\u02d8\u2323\u02d8)\u0283 (>'-')> <('-'<) ^('-')^ v('-')v (>'-')> (^-^) Happy \u00b6 \u1555( \u141b )\u1557 \u0295\u2022\u1d25\u2022\u0294 (\u2022\u203f\u2022) (\u25e1\u203f\u25e1\u273f) (\u273f\u25e0\u203f\u25e0) \u266a(\u0e51\u1d16\u25e1\u1d16\u0e51)\u266a Kisses \u00b6 (\u3065\uffe3 \u00b3\uffe3)\u3065 ( \u02d8 \u00b3\u02d8)\u2665 Love \u00b6 \u2764 Pride \u00b6 <(\uffe3\uff3e\uffe3)> Relax \u00b6 _\u3078__(\u203e\u25e1\u25dd )> Sad \u00b6 \uff61\uff9f(*\u00b4\u25a1`)\uff9f\uff61 (\u25de\u2038\u25df\uff1b) Scared \u00b6 \u30fd(\uff9f\u0414\uff9f)\uff89 \u30fd\u3014\uff9f\u0414\uff9f\u3015\u4e3f Sleepy \u00b6 (\u1d17\u02f3\u1d17) Smug \u00b6 \uff08\uffe3\uff5e\uffe3\uff09 Whyyyy? \u00b6 (/\uff9f\u0414\uff9f)/ Surprised \u00b6 (\\_/) (O.o) (> <) (\u2299_\u2609) (\u00ac\u00ba-\u00b0)\u00ac (\u2609_\u2609) (\u2022 \u0325\u0306\u2006\u2022) \u00af\\(\u00b0_o)/\u00af (\u30fb0\u30fb\u3002(\u30fb-\u30fb\u3002(\u30fb0\u30fb\u3002(\u30fb-\u30fb\u3002) (*\uff9f\u25ef\uff9f*) Who cares \u00b6 \u00af\\_(\u30c4)_/\u00af WTF \u00b6 (\u256f\u00b0\u25a1\u00b0)\u256f \u253b\u2501\u253b \u30d8\uff08\u3002\u25a1\u00b0\uff09\u30d8 Links \u00b6 Japanese Emoticons","title":"Emojis"},{"location":"emojis/#angry","text":"(\u0482\u2323\u0300_\u2323\u0301) ( >\u0434<) \u0295\u2022\u0300o\u2022\u0301\u0294 \u30fd(\u2267\u0414\u2266)\u30ce \u1559(\u21c0\u2038\u21bc\u2036)\u1557 \u0669(\u256c\u0298\u76ca\u0298\u256c)\u06f6","title":"Angry"},{"location":"emojis/#annoyed","text":"(>_<)","title":"Annoyed"},{"location":"emojis/#awesome","text":"( \u00b7_\u00b7) ( \u00b7_\u00b7) --\u25a0-\u25a0 ( \u00b7_\u00b7)--\u25a0-\u25a0 (-\u25a0_\u25a0) YEAAAAAAAAAAAAAAAAAAAAAHHHHHHHHHHHH","title":"Awesome"},{"location":"emojis/#conforting","text":"(\uff4f\u30fb_\u30fb)\u30ce\u201d(\u1d17_ \u1d17\u3002)","title":"Conforting"},{"location":"emojis/#congratulations","text":"( \u141b )\u0648 \uff3c\\ \u0669( \u141b )\u0648 /\uff0f","title":"Congratulations"},{"location":"emojis/#crying","text":"(\u2565\ufe4f\u2565)","title":"Crying"},{"location":"emojis/#excited","text":"(((o(*\uff9f\u25bd\uff9f*)o))) o(\u2267\u2207\u2266o)","title":"Excited"},{"location":"emojis/#dance","text":"(~\u203e\u25bf\u203e)~ ~(\u203e\u25bf\u203e)~ ~(\u203e\u25bf\u203e~) \u250c(\u30fb\u3002\u30fb)\u2518 \u266a \u2514(\u30fb\u3002\u30fb)\u2510 \u266a \u250c(\u30fb\u3002\u30fb)\u2518 \u01aa(\u02d8\u2323\u02d8)\u2510 \u01aa(\u02d8\u2323\u02d8)\u0283 \u250c(\u02d8\u2323\u02d8)\u0283 (>'-')> <('-'<) ^('-')^ v('-')v (>'-')> (^-^)","title":"Dance"},{"location":"emojis/#happy","text":"\u1555( \u141b )\u1557 \u0295\u2022\u1d25\u2022\u0294 (\u2022\u203f\u2022) (\u25e1\u203f\u25e1\u273f) (\u273f\u25e0\u203f\u25e0) \u266a(\u0e51\u1d16\u25e1\u1d16\u0e51)\u266a","title":"Happy"},{"location":"emojis/#kisses","text":"(\u3065\uffe3 \u00b3\uffe3)\u3065 ( \u02d8 \u00b3\u02d8)\u2665","title":"Kisses"},{"location":"emojis/#love","text":"\u2764","title":"Love"},{"location":"emojis/#pride","text":"<(\uffe3\uff3e\uffe3)>","title":"Pride"},{"location":"emojis/#relax","text":"_\u3078__(\u203e\u25e1\u25dd )>","title":"Relax"},{"location":"emojis/#sad","text":"\uff61\uff9f(*\u00b4\u25a1`)\uff9f\uff61 (\u25de\u2038\u25df\uff1b)","title":"Sad"},{"location":"emojis/#scared","text":"\u30fd(\uff9f\u0414\uff9f)\uff89 \u30fd\u3014\uff9f\u0414\uff9f\u3015\u4e3f","title":"Scared"},{"location":"emojis/#sleepy","text":"(\u1d17\u02f3\u1d17)","title":"Sleepy"},{"location":"emojis/#smug","text":"\uff08\uffe3\uff5e\uffe3\uff09","title":"Smug"},{"location":"emojis/#whyyyy","text":"(/\uff9f\u0414\uff9f)/","title":"Whyyyy?"},{"location":"emojis/#surprised","text":"(\\_/) (O.o) (> <) (\u2299_\u2609) (\u00ac\u00ba-\u00b0)\u00ac (\u2609_\u2609) (\u2022 \u0325\u0306\u2006\u2022) \u00af\\(\u00b0_o)/\u00af (\u30fb0\u30fb\u3002(\u30fb-\u30fb\u3002(\u30fb0\u30fb\u3002(\u30fb-\u30fb\u3002) (*\uff9f\u25ef\uff9f*)","title":"Surprised"},{"location":"emojis/#who-cares","text":"\u00af\\_(\u30c4)_/\u00af","title":"Who cares"},{"location":"emojis/#wtf","text":"(\u256f\u00b0\u25a1\u00b0)\u256f \u253b\u2501\u253b \u30d8\uff08\u3002\u25a1\u00b0\uff09\u30d8","title":"WTF"},{"location":"emojis/#links","text":"Japanese Emoticons","title":"Links"},{"location":"coding/coding/","text":"Coding notes \u00b6","title":"Coding"},{"location":"coding/coding/#coding-notes","text":"","title":"Coding notes"},{"location":"coding/git/","text":"Useful commands \u00b6 Clone a repo with limited history and specific branch \u00b6 git clone --depth 10 --single-branch --branch <mybranch> <therepo>","title":"Git"},{"location":"coding/git/#useful-commands","text":"","title":"Useful commands"},{"location":"coding/git/#clone-a-repo-with-limited-history-and-specific-branch","text":"git clone --depth 10 --single-branch --branch <mybranch> <therepo>","title":"Clone a repo with limited history and specific branch"},{"location":"coding/jvm/jfr/","text":"Flight Recorder Info \u00b6 The info below was testing specifically for Java version 8. As of Java version 11, the Flight recorder is now part of the standard OpenJDK and does not require enabling of commerical features. This also means that it can be used in production. As of OpenJDK 8u262 JFR is now also available. Enabling JVM app for Flight Recorder \u00b6 Oracle JVM \u00b6 For Oracle there are specific flags that need to be set for the app. Obviously the changes below are only allowed on non-production systems unless you have paid for licenses from Oracle. -XX:+UnlockCommercialFeatures -XX:+FlightRecorder It is also recommended to enable the two flags below. Out of the box the method profiler will use safepoint boundaries when profiling methods, which may skew results. When enabling the flags below when necessary, you will get more accurate profiling results on where the time is spent in your app. This is why Flight recorder is preferred over other profilers such as YourKit, VisualVM. -XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints Capturing a recording \u00b6 Flight Recorder - Start with app \u00b6 -XX:StartFlightRecording=duration=20s,delay=5s,settings=profile,filename=recording.jfr Flight Recorder - Start Recording on running JVM \u00b6 Start a recording with a time limit, specifying location to save to and compression. jcmd <process id> JFR.start name=Test-01 filename=/app/record-test-01.jfr settings=default-with-alloc duration=30s stackdepth=1024 Flight Recorder - Start recording with no duration defined \u00b6 Start a recording without a time limit, a future command will be executed to dump manually to a file. jcmd <process id> JFR.start name=Test-07 settings=profile Flight Recorder - Dump recording that is running \u00b6 Dump the recording when enough data has been captured. jcmd <process id> JFR.dump name=Test-08 filename=/app/test-08.jfr Flight Recorder - Enable Allocations capture \u00b6 Copy default.jfr and edit the file in /jre/lib/jfr/ Edit the file (or better yet a copy of it) and change the following to enable allocation tracking. The profile.jfr also includes allocation capture. <flag name= \"allocation-profiling-enabled\" label= \"Allocation Profiling\" > true </flag> <event path= \"java/object_alloc_in_new_TLAB\" > <setting name= \"enabled\" control= \"allocation-profiling-enabled\" > true </setting> <setting name= \"stackTrace\" > true </setting> </event> <event path= \"java/object_alloc_outside_TLAB\" > <setting name= \"enabled\" control= \"allocation-profiling-enabled\" > true </setting> <setting name= \"stackTrace\" > true </setting> </event> Links \u00b6 https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u/","title":"Java Flight Recorder"},{"location":"coding/jvm/jfr/#flight-recorder-info","text":"The info below was testing specifically for Java version 8. As of Java version 11, the Flight recorder is now part of the standard OpenJDK and does not require enabling of commerical features. This also means that it can be used in production. As of OpenJDK 8u262 JFR is now also available.","title":"Flight Recorder Info"},{"location":"coding/jvm/jfr/#enabling-jvm-app-for-flight-recorder","text":"","title":"Enabling JVM app for Flight Recorder"},{"location":"coding/jvm/jfr/#oracle-jvm","text":"For Oracle there are specific flags that need to be set for the app. Obviously the changes below are only allowed on non-production systems unless you have paid for licenses from Oracle. -XX:+UnlockCommercialFeatures -XX:+FlightRecorder It is also recommended to enable the two flags below. Out of the box the method profiler will use safepoint boundaries when profiling methods, which may skew results. When enabling the flags below when necessary, you will get more accurate profiling results on where the time is spent in your app. This is why Flight recorder is preferred over other profilers such as YourKit, VisualVM. -XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints","title":"Oracle JVM"},{"location":"coding/jvm/jfr/#capturing-a-recording","text":"","title":"Capturing a recording"},{"location":"coding/jvm/jfr/#flight-recorder-start-with-app","text":"-XX:StartFlightRecording=duration=20s,delay=5s,settings=profile,filename=recording.jfr","title":"Flight Recorder - Start with app"},{"location":"coding/jvm/jfr/#flight-recorder-start-recording-on-running-jvm","text":"Start a recording with a time limit, specifying location to save to and compression. jcmd <process id> JFR.start name=Test-01 filename=/app/record-test-01.jfr settings=default-with-alloc duration=30s stackdepth=1024","title":"Flight Recorder - Start Recording on running JVM"},{"location":"coding/jvm/jfr/#flight-recorder-start-recording-with-no-duration-defined","text":"Start a recording without a time limit, a future command will be executed to dump manually to a file. jcmd <process id> JFR.start name=Test-07 settings=profile","title":"Flight Recorder - Start recording with no duration defined"},{"location":"coding/jvm/jfr/#flight-recorder-dump-recording-that-is-running","text":"Dump the recording when enough data has been captured. jcmd <process id> JFR.dump name=Test-08 filename=/app/test-08.jfr","title":"Flight Recorder - Dump recording that is running"},{"location":"coding/jvm/jfr/#flight-recorder-enable-allocations-capture","text":"Copy default.jfr and edit the file in /jre/lib/jfr/ Edit the file (or better yet a copy of it) and change the following to enable allocation tracking. The profile.jfr also includes allocation capture. <flag name= \"allocation-profiling-enabled\" label= \"Allocation Profiling\" > true </flag> <event path= \"java/object_alloc_in_new_TLAB\" > <setting name= \"enabled\" control= \"allocation-profiling-enabled\" > true </setting> <setting name= \"stackTrace\" > true </setting> </event> <event path= \"java/object_alloc_outside_TLAB\" > <setting name= \"enabled\" control= \"allocation-profiling-enabled\" > true </setting> <setting name= \"stackTrace\" > true </setting> </event>","title":"Flight Recorder - Enable Allocations capture"},{"location":"coding/jvm/jfr/#links","text":"https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u/","title":"Links"},{"location":"coding/jvm/jvm-flags/","text":"This page contains useful JVM flags and information on setting JVM flags. Show me current flag settings \u00b6 java -XX:+PrintFlagsFinal -version Will output the current config which you can pipe or grep on to your heart's content.","title":"JVM Flags"},{"location":"coding/jvm/jvm-flags/#show-me-current-flag-settings","text":"java -XX:+PrintFlagsFinal -version Will output the current config which you can pipe or grep on to your heart's content.","title":"Show me current flag settings"},{"location":"coding/jvm/jvm-troubleshooting/","text":"JVM Troubleshooting \u00b6 This lists useful commands and options for troubleshooting performance or other issues with the JVM. Find JVMs available to connect through jcmd \u00b6 jcmd This will list all the JVM processes it can find with their pids. List all commands available via jcmd in the JVM \u00b6 jcmd <pid> help This will for the particular JVM output the commands available. Capturing a heap dump from JVM \u00b6 Take a dump of all objects, not just live objects in the binary format. This does not force a full GC and may include dead objects. jmap -dump:format = b,file = <filename.hprof> <pid> Heap dump with forced full GC before dump: jmap -dump:live,format = b,file = <filename.hprof> <pid> https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jmap.html Using jcmd (note does not seem to support live objects only) jcmd <pid> GC.heap_dump filename = <file> Heap Histogram \u00b6 Live objects without forcing a full GC. jcmd <pid> GC.class_histogram Includes dead objects. jmap -histo <pid> Forces a full gc before outputting the histogram. jmap -histo:live <pid> Dump Native Memory Summary \u00b6 Must be enabled with JVM flag -XX:NativeMemoryTracking=summary Dumps a summary of the usage of the native memory by the JVM. jcmd <pid> VM.native_memory summary You can also take a baseline and do a comparison: jcmd <pid> VM.native_memory baseline You can then compare the baseline to the current: jcmd <pid> VM.native_memory summary.diff Dump class stats (>=J8) \u00b6 Must be enabled with JVM flag -XX:+UnlockDiagnosticVMOptions jcmd <pid> GC.class_stats","title":"JVM Troubleshooting"},{"location":"coding/jvm/jvm-troubleshooting/#jvm-troubleshooting","text":"This lists useful commands and options for troubleshooting performance or other issues with the JVM.","title":"JVM Troubleshooting"},{"location":"coding/jvm/jvm-troubleshooting/#find-jvms-available-to-connect-through-jcmd","text":"jcmd This will list all the JVM processes it can find with their pids.","title":"Find JVMs available to connect through jcmd"},{"location":"coding/jvm/jvm-troubleshooting/#list-all-commands-available-via-jcmd-in-the-jvm","text":"jcmd <pid> help This will for the particular JVM output the commands available.","title":"List all commands available via jcmd in the JVM"},{"location":"coding/jvm/jvm-troubleshooting/#capturing-a-heap-dump-from-jvm","text":"Take a dump of all objects, not just live objects in the binary format. This does not force a full GC and may include dead objects. jmap -dump:format = b,file = <filename.hprof> <pid> Heap dump with forced full GC before dump: jmap -dump:live,format = b,file = <filename.hprof> <pid> https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jmap.html Using jcmd (note does not seem to support live objects only) jcmd <pid> GC.heap_dump filename = <file>","title":"Capturing a heap dump from JVM"},{"location":"coding/jvm/jvm-troubleshooting/#heap-histogram","text":"Live objects without forcing a full GC. jcmd <pid> GC.class_histogram Includes dead objects. jmap -histo <pid> Forces a full gc before outputting the histogram. jmap -histo:live <pid>","title":"Heap Histogram"},{"location":"coding/jvm/jvm-troubleshooting/#dump-native-memory-summary","text":"Must be enabled with JVM flag -XX:NativeMemoryTracking=summary Dumps a summary of the usage of the native memory by the JVM. jcmd <pid> VM.native_memory summary You can also take a baseline and do a comparison: jcmd <pid> VM.native_memory baseline You can then compare the baseline to the current: jcmd <pid> VM.native_memory summary.diff","title":"Dump Native Memory Summary"},{"location":"coding/jvm/jvm-troubleshooting/#dump-class-stats-j8","text":"Must be enabled with JVM flag -XX:+UnlockDiagnosticVMOptions jcmd <pid> GC.class_stats","title":"Dump class stats (&gt;=J8)"},{"location":"coding/jvm/jvm/","text":"This page contains links for information on the JVM. Child pages \u00b6 JVM Flags JVM Troublehsooting Java native memory \u00b6 Stats were added in Java 8 when the permgen data was moved off heap. Enabled by setting the option: -XX:NativeMemoryTracking=off|summary|details If you enable the summary or detailed information it is then possible to capture the stats using jcmd: jcmd <pid> VM.native_memory_summary It is also possible to set a baseline and then produce a diff using jcmd Start app and capture baseline jcmd <pid> VM.native_memory baseline Then you can produce a diff jcmd <pid> VM.native_memory summary.diff You can access the detailed information using jcmd again: jcmd <pid> VM.native_memory detail Java object layout \u00b6 Provides a good guide to the size of the object header in Java and what it is made up of, for 64bit (compressed oops on and off) and 32 bit JVM. https://gist.github.com/arturmkrtchyan/43d6135e8a15798cc46c Excellent guide to memory layout: http://psy-lob-saw.blogspot.com/2013/05/know-thy-java-object-memory-layout.html The tool jol is a library that can be used to identify the expected size of an object. Here we see the output for testing with jol on a 64bit compressed oops JVM. public final class MyClassSingleInt { public int value ; } com . bvb . MyClassSingleInt object internals : OFFSET SIZE TYPE DESCRIPTION VALUE 0 12 ( object header ) N / A 12 4 int MyClassSingleInt . value N / A Instance size : 16 bytes Space losses : 0 bytes internal + 0 bytes external = 0 bytes total public final class MyClassTwoInts { public int int1 ; public int int2 ; } com . bvb . MyClassTwoInts object internals : OFFSET SIZE TYPE DESCRIPTION VALUE 0 12 ( object header ) N / A 12 4 int MyClassTwoInts . int1 N / A 16 4 int MyClassTwoInts . int2 N / A 20 4 ( loss due to the next object alignment ) Instance size : 24 bytes Space losses : 0 bytes internal + 4 bytes external = 4 bytes total You can see that the second object with two ints, each of size 4 bytes, will loose a total of 4 bytes due to the alignment of the object on 8 byte boundaries. Compressed Oops \u00b6 Oops stands for ordinary object pointer and refers to the object references in the JVM. On 64bit hardware a pointer is sized at 64 bits, whereas in the 32bit world obviously 32bits. 32 bit means the addressable memory is 4GB. 64 bit means the addressable memory is 2^64 bytes, which is a lot. The use of 64bit pointers in the JVM incurs a performance penalty due to the extra data that uses up valuable space in the CPU caches. Java Performance the Definitive Guide lists the penalty as being 5-20% for moving to 64bit from 32bit. In order to get round this potential performance issue the JVM uses a trick that increases performance. It stores what is really a 35bit pointer in a 32bit memory location/register. Then when actually using this pointer it shifts it 3 places to the left. This means obviously that the first three bits are always zero for every pointer. 35 bit means the addressable memory is 32GB. As the first three places are always zero, the JVM is only able to reference memory that is divisible by 8. Objects in the 32bit and 64bit JVM are already aligned on a 8-byte boundary and therefore this additional overhead should not make any difference. Heaps <32GB use compressed oops by default since a version of Java 7. Heaps over 32GB revert to using the 64 bit pointers and therefore are most likely slower, even if the heap itself is only using (as an example) 500MB extra over 32GB. Enable remote debugging \u00b6 Java 8 and before \u00b6 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 Java 9+ \u00b6 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 Enable JMX without auth \u00b6 Warning don't expose this to the world Commands to enable Jmx without any authentication -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=[jmx port] -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=<hostname or ip used to connect to the remote server> Sometimes it happens that the ip picked up automatically for hostname above is 127.0.0.1 and therefore when connecting remotely it will seem to connect but will then fail.","title":"JVM"},{"location":"coding/jvm/jvm/#child-pages","text":"JVM Flags JVM Troublehsooting","title":"Child pages"},{"location":"coding/jvm/jvm/#java-native-memory","text":"Stats were added in Java 8 when the permgen data was moved off heap. Enabled by setting the option: -XX:NativeMemoryTracking=off|summary|details If you enable the summary or detailed information it is then possible to capture the stats using jcmd: jcmd <pid> VM.native_memory_summary It is also possible to set a baseline and then produce a diff using jcmd Start app and capture baseline jcmd <pid> VM.native_memory baseline Then you can produce a diff jcmd <pid> VM.native_memory summary.diff You can access the detailed information using jcmd again: jcmd <pid> VM.native_memory detail","title":"Java native memory"},{"location":"coding/jvm/jvm/#java-object-layout","text":"Provides a good guide to the size of the object header in Java and what it is made up of, for 64bit (compressed oops on and off) and 32 bit JVM. https://gist.github.com/arturmkrtchyan/43d6135e8a15798cc46c Excellent guide to memory layout: http://psy-lob-saw.blogspot.com/2013/05/know-thy-java-object-memory-layout.html The tool jol is a library that can be used to identify the expected size of an object. Here we see the output for testing with jol on a 64bit compressed oops JVM. public final class MyClassSingleInt { public int value ; } com . bvb . MyClassSingleInt object internals : OFFSET SIZE TYPE DESCRIPTION VALUE 0 12 ( object header ) N / A 12 4 int MyClassSingleInt . value N / A Instance size : 16 bytes Space losses : 0 bytes internal + 0 bytes external = 0 bytes total public final class MyClassTwoInts { public int int1 ; public int int2 ; } com . bvb . MyClassTwoInts object internals : OFFSET SIZE TYPE DESCRIPTION VALUE 0 12 ( object header ) N / A 12 4 int MyClassTwoInts . int1 N / A 16 4 int MyClassTwoInts . int2 N / A 20 4 ( loss due to the next object alignment ) Instance size : 24 bytes Space losses : 0 bytes internal + 4 bytes external = 4 bytes total You can see that the second object with two ints, each of size 4 bytes, will loose a total of 4 bytes due to the alignment of the object on 8 byte boundaries.","title":"Java object layout"},{"location":"coding/jvm/jvm/#compressed-oops","text":"Oops stands for ordinary object pointer and refers to the object references in the JVM. On 64bit hardware a pointer is sized at 64 bits, whereas in the 32bit world obviously 32bits. 32 bit means the addressable memory is 4GB. 64 bit means the addressable memory is 2^64 bytes, which is a lot. The use of 64bit pointers in the JVM incurs a performance penalty due to the extra data that uses up valuable space in the CPU caches. Java Performance the Definitive Guide lists the penalty as being 5-20% for moving to 64bit from 32bit. In order to get round this potential performance issue the JVM uses a trick that increases performance. It stores what is really a 35bit pointer in a 32bit memory location/register. Then when actually using this pointer it shifts it 3 places to the left. This means obviously that the first three bits are always zero for every pointer. 35 bit means the addressable memory is 32GB. As the first three places are always zero, the JVM is only able to reference memory that is divisible by 8. Objects in the 32bit and 64bit JVM are already aligned on a 8-byte boundary and therefore this additional overhead should not make any difference. Heaps <32GB use compressed oops by default since a version of Java 7. Heaps over 32GB revert to using the 64 bit pointers and therefore are most likely slower, even if the heap itself is only using (as an example) 500MB extra over 32GB.","title":"Compressed Oops"},{"location":"coding/jvm/jvm/#enable-remote-debugging","text":"","title":"Enable remote debugging"},{"location":"coding/jvm/jvm/#java-8-and-before","text":"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005","title":"Java 8 and before"},{"location":"coding/jvm/jvm/#java-9","text":"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005","title":"Java 9+"},{"location":"coding/jvm/jvm/#enable-jmx-without-auth","text":"Warning don't expose this to the world Commands to enable Jmx without any authentication -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=[jmx port] -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=<hostname or ip used to connect to the remote server> Sometimes it happens that the ip picked up automatically for hostname above is 127.0.0.1 and therefore when connecting remotely it will seem to connect but will then fail.","title":"Enable JMX without auth"},{"location":"coding/shell/bash-handling-params/","text":"Example script that deals with input params by name \u00b6 #!/usr/bin/env bash set -euo pipefail # pipefail # e=if a command fails the shell will exit (i.e. return > 0) # u=write an error when trying to expand a variable that is not set # o=set pipefail When used in combination with set -e, pipefail will make a script exit if any command in a pipeline errors. ## Fetching params by name rather than position INPUT = default-input.txt OUTPUT = default-output.txt while [[ ${#} -gt 0 ]] ; do case \" ${ 1 } \" in --input ) INPUT = \" ${ 2 } \" ; shift ;; --output ) OUTPUT = \" ${ 2 } \" ; shift ;; -- ) break ;; -* ) echo \"Unrecognized option ${ 1 } \" ; exit 1 ; esac shift done # Check for var being null if [[ ${ INPUT } == \"\" ]] ; then echo \"--input needs to be set\" exit 1 ; fi","title":"Bash Handling params"},{"location":"coding/shell/bash-handling-params/#example-script-that-deals-with-input-params-by-name","text":"#!/usr/bin/env bash set -euo pipefail # pipefail # e=if a command fails the shell will exit (i.e. return > 0) # u=write an error when trying to expand a variable that is not set # o=set pipefail When used in combination with set -e, pipefail will make a script exit if any command in a pipeline errors. ## Fetching params by name rather than position INPUT = default-input.txt OUTPUT = default-output.txt while [[ ${#} -gt 0 ]] ; do case \" ${ 1 } \" in --input ) INPUT = \" ${ 2 } \" ; shift ;; --output ) OUTPUT = \" ${ 2 } \" ; shift ;; -- ) break ;; -* ) echo \"Unrecognized option ${ 1 } \" ; exit 1 ; esac shift done # Check for var being null if [[ ${ INPUT } == \"\" ]] ; then echo \"--input needs to be set\" exit 1 ; fi","title":"Example script that deals with input params by name"},{"location":"linux/monitoring/","text":"Linux Monitoring \u00b6 Memory \u00b6 free -m List of availble memory and used memory before/after buffers and caches are taken into consideration. Does not include the memory used for the kernel caches, i.e. Slab. This memory will contribute to the overall used memory but will not show against the process. Show resident set size (RSS) and virtual memory size (VMZ) for processes, also lists the command. ps -eo pid,rss,vsz,cmd If you take the sum of RSS + Slab -Shared then it is roughly equivalent to used memory from free (-buffers, caches). List the current memory usage with breakdowns: cat /proc/meminfo List the slab usage cat /proc/slabinfo For the above the size (Bytes) can be calculated by multiplying <num_objs> * <objsize> . Also slabtop provides info on the used memory for slab. slabtop References \u00b6 Droping kernel caches: https://linux-mm.org/Drop_Caches Where is my memory: https://www.dedoimedo.com/computers/slabinfo.html Redhat6 memory info: https://access.redhat.com/solutions/406773 Slabs: https://medium.com/@dhelios/memory-caches-and-slab-objects-c1de113ce235","title":"Monitoring"},{"location":"linux/monitoring/#linux-monitoring","text":"","title":"Linux Monitoring"},{"location":"linux/monitoring/#memory","text":"free -m List of availble memory and used memory before/after buffers and caches are taken into consideration. Does not include the memory used for the kernel caches, i.e. Slab. This memory will contribute to the overall used memory but will not show against the process. Show resident set size (RSS) and virtual memory size (VMZ) for processes, also lists the command. ps -eo pid,rss,vsz,cmd If you take the sum of RSS + Slab -Shared then it is roughly equivalent to used memory from free (-buffers, caches). List the current memory usage with breakdowns: cat /proc/meminfo List the slab usage cat /proc/slabinfo For the above the size (Bytes) can be calculated by multiplying <num_objs> * <objsize> . Also slabtop provides info on the used memory for slab. slabtop","title":"Memory"},{"location":"linux/monitoring/#references","text":"Droping kernel caches: https://linux-mm.org/Drop_Caches Where is my memory: https://www.dedoimedo.com/computers/slabinfo.html Redhat6 memory info: https://access.redhat.com/solutions/406773 Slabs: https://medium.com/@dhelios/memory-caches-and-slab-objects-c1de113ce235","title":"References"}]}