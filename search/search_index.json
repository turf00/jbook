{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is a wiki where I store useful information that I find and links using MkDocs . The format and process to generate the wiki was taken from GitHub . Thanks very much Lyz-code!","title":"Introduction"},{"location":"contact/","text":"Create an issue in the Github if you wish to reach out.","title":"Contact"},{"location":"emojis/","text":"Curated list of emojis to copy paste. Angry \u00b6 (\u0482\u2323\u0300_\u2323\u0301) ( >\u0434<) \u0295\u2022\u0300o\u2022\u0301\u0294 \u30fd(\u2267\u0414\u2266)\u30ce \u1559(\u21c0\u2038\u21bc\u2036)\u1557 \u0669(\u256c\u0298\u76ca\u0298\u256c)\u06f6 Annoyed \u00b6 (>_<) Awesome \u00b6 ( \u00b7_\u00b7) ( \u00b7_\u00b7) --\u25a0-\u25a0 ( \u00b7_\u00b7)--\u25a0-\u25a0 (-\u25a0_\u25a0) YEAAAAAAAAAAAAAAAAAAAAAHHHHHHHHHHHH Conforting \u00b6 (\uff4f\u30fb_\u30fb)\u30ce\u201d(\u1d17_ \u1d17\u3002) Congratulations \u00b6 ( \u141b )\u0648 \uff3c\\ \u0669( \u141b )\u0648 /\uff0f Crying \u00b6 (\u2565\ufe4f\u2565) Excited \u00b6 (((o(*\uff9f\u25bd\uff9f*)o))) o(\u2267\u2207\u2266o) Dance \u00b6 (~\u203e\u25bf\u203e)~ ~(\u203e\u25bf\u203e)~ ~(\u203e\u25bf\u203e~) \u250c(\u30fb\u3002\u30fb)\u2518 \u266a \u2514(\u30fb\u3002\u30fb)\u2510 \u266a \u250c(\u30fb\u3002\u30fb)\u2518 \u01aa(\u02d8\u2323\u02d8)\u2510 \u01aa(\u02d8\u2323\u02d8)\u0283 \u250c(\u02d8\u2323\u02d8)\u0283 (>'-')> <('-'<) ^('-')^ v('-')v (>'-')> (^-^) Happy \u00b6 \u1555( \u141b )\u1557 \u0295\u2022\u1d25\u2022\u0294 (\u2022\u203f\u2022) (\u25e1\u203f\u25e1\u273f) (\u273f\u25e0\u203f\u25e0) \u266a(\u0e51\u1d16\u25e1\u1d16\u0e51)\u266a Kisses \u00b6 (\u3065\uffe3 \u00b3\uffe3)\u3065 ( \u02d8 \u00b3\u02d8)\u2665 Love \u00b6 \u2764 Pride \u00b6 <(\uffe3\uff3e\uffe3)> Relax \u00b6 _\u3078__(\u203e\u25e1\u25dd )> Sad \u00b6 \uff61\uff9f(*\u00b4\u25a1`)\uff9f\uff61 (\u25de\u2038\u25df\uff1b) Scared \u00b6 \u30fd(\uff9f\u0414\uff9f)\uff89 \u30fd\u3014\uff9f\u0414\uff9f\u3015\u4e3f Sleepy \u00b6 (\u1d17\u02f3\u1d17) Smug \u00b6 \uff08\uffe3\uff5e\uffe3\uff09 Whyyyy? \u00b6 (/\uff9f\u0414\uff9f)/ Surprised \u00b6 (\\_/) (O.o) (> <) (\u2299_\u2609) (\u00ac\u00ba-\u00b0)\u00ac (\u2609_\u2609) (\u2022 \u0325\u0306\u2006\u2022) \u00af\\(\u00b0_o)/\u00af (\u30fb0\u30fb\u3002(\u30fb-\u30fb\u3002(\u30fb0\u30fb\u3002(\u30fb-\u30fb\u3002) (*\uff9f\u25ef\uff9f*) Who cares \u00b6 \u00af\\_(\u30c4)_/\u00af WTF \u00b6 (\u256f\u00b0\u25a1\u00b0)\u256f \u253b\u2501\u253b \u30d8\uff08\u3002\u25a1\u00b0\uff09\u30d8 Links \u00b6 Japanese Emoticons","title":"Emojis"},{"location":"emojis/#angry","text":"(\u0482\u2323\u0300_\u2323\u0301) ( >\u0434<) \u0295\u2022\u0300o\u2022\u0301\u0294 \u30fd(\u2267\u0414\u2266)\u30ce \u1559(\u21c0\u2038\u21bc\u2036)\u1557 \u0669(\u256c\u0298\u76ca\u0298\u256c)\u06f6","title":"Angry"},{"location":"emojis/#annoyed","text":"(>_<)","title":"Annoyed"},{"location":"emojis/#awesome","text":"( \u00b7_\u00b7) ( \u00b7_\u00b7) --\u25a0-\u25a0 ( \u00b7_\u00b7)--\u25a0-\u25a0 (-\u25a0_\u25a0) YEAAAAAAAAAAAAAAAAAAAAAHHHHHHHHHHHH","title":"Awesome"},{"location":"emojis/#conforting","text":"(\uff4f\u30fb_\u30fb)\u30ce\u201d(\u1d17_ \u1d17\u3002)","title":"Conforting"},{"location":"emojis/#congratulations","text":"( \u141b )\u0648 \uff3c\\ \u0669( \u141b )\u0648 /\uff0f","title":"Congratulations"},{"location":"emojis/#crying","text":"(\u2565\ufe4f\u2565)","title":"Crying"},{"location":"emojis/#excited","text":"(((o(*\uff9f\u25bd\uff9f*)o))) o(\u2267\u2207\u2266o)","title":"Excited"},{"location":"emojis/#dance","text":"(~\u203e\u25bf\u203e)~ ~(\u203e\u25bf\u203e)~ ~(\u203e\u25bf\u203e~) \u250c(\u30fb\u3002\u30fb)\u2518 \u266a \u2514(\u30fb\u3002\u30fb)\u2510 \u266a \u250c(\u30fb\u3002\u30fb)\u2518 \u01aa(\u02d8\u2323\u02d8)\u2510 \u01aa(\u02d8\u2323\u02d8)\u0283 \u250c(\u02d8\u2323\u02d8)\u0283 (>'-')> <('-'<) ^('-')^ v('-')v (>'-')> (^-^)","title":"Dance"},{"location":"emojis/#happy","text":"\u1555( \u141b )\u1557 \u0295\u2022\u1d25\u2022\u0294 (\u2022\u203f\u2022) (\u25e1\u203f\u25e1\u273f) (\u273f\u25e0\u203f\u25e0) \u266a(\u0e51\u1d16\u25e1\u1d16\u0e51)\u266a","title":"Happy"},{"location":"emojis/#kisses","text":"(\u3065\uffe3 \u00b3\uffe3)\u3065 ( \u02d8 \u00b3\u02d8)\u2665","title":"Kisses"},{"location":"emojis/#love","text":"\u2764","title":"Love"},{"location":"emojis/#pride","text":"<(\uffe3\uff3e\uffe3)>","title":"Pride"},{"location":"emojis/#relax","text":"_\u3078__(\u203e\u25e1\u25dd )>","title":"Relax"},{"location":"emojis/#sad","text":"\uff61\uff9f(*\u00b4\u25a1`)\uff9f\uff61 (\u25de\u2038\u25df\uff1b)","title":"Sad"},{"location":"emojis/#scared","text":"\u30fd(\uff9f\u0414\uff9f)\uff89 \u30fd\u3014\uff9f\u0414\uff9f\u3015\u4e3f","title":"Scared"},{"location":"emojis/#sleepy","text":"(\u1d17\u02f3\u1d17)","title":"Sleepy"},{"location":"emojis/#smug","text":"\uff08\uffe3\uff5e\uffe3\uff09","title":"Smug"},{"location":"emojis/#whyyyy","text":"(/\uff9f\u0414\uff9f)/","title":"Whyyyy?"},{"location":"emojis/#surprised","text":"(\\_/) (O.o) (> <) (\u2299_\u2609) (\u00ac\u00ba-\u00b0)\u00ac (\u2609_\u2609) (\u2022 \u0325\u0306\u2006\u2022) \u00af\\(\u00b0_o)/\u00af (\u30fb0\u30fb\u3002(\u30fb-\u30fb\u3002(\u30fb0\u30fb\u3002(\u30fb-\u30fb\u3002) (*\uff9f\u25ef\uff9f*)","title":"Surprised"},{"location":"emojis/#who-cares","text":"\u00af\\_(\u30c4)_/\u00af","title":"Who cares"},{"location":"emojis/#wtf","text":"(\u256f\u00b0\u25a1\u00b0)\u256f \u253b\u2501\u253b \u30d8\uff08\u3002\u25a1\u00b0\uff09\u30d8","title":"WTF"},{"location":"emojis/#links","text":"Japanese Emoticons","title":"Links"},{"location":"coding/coding/","text":"Coding notes \u00b6","title":"Coding"},{"location":"coding/coding/#coding-notes","text":"","title":"Coding notes"},{"location":"coding/git/","text":"Useful commands \u00b6 Clone a repo with limited history and specific branch \u00b6 git clone --depth 10 --single-branch --branch <mybranch> <therepo>","title":"Git"},{"location":"coding/git/#useful-commands","text":"","title":"Useful commands"},{"location":"coding/git/#clone-a-repo-with-limited-history-and-specific-branch","text":"git clone --depth 10 --single-branch --branch <mybranch> <therepo>","title":"Clone a repo with limited history and specific branch"},{"location":"coding/jvm/jvm-flags/","text":"This page contains useful JVM flags and information on setting JVM flags. Show me current flag settings \u00b6 java -XX:+PrintFlagsFinal -version Will output the current config which you can pipe or grep on to your heart's content.","title":"JVM Flags"},{"location":"coding/jvm/jvm-flags/#show-me-current-flag-settings","text":"java -XX:+PrintFlagsFinal -version Will output the current config which you can pipe or grep on to your heart's content.","title":"Show me current flag settings"},{"location":"coding/jvm/jvm/","text":"This page contains links for information on the JVM. Child pages \u00b6 JVM Flags Java native memory \u00b6 Stats were added in Java 8 when the permgen data was moved off heap. Enabled by setting the option: -XX:NativeMemoryTracking=off|summary|details If you enable the summary or detailed information it is then possible to capture the stats using jcmd: jcmd <pid> VM.native_memory_summary It is also possible to set a baseline and then produce a diff using jcmd Start app and capture baseline jcmd <pid> VM.native_memory baseline Then you can produce a diff jcmd <pid> VM.native_memory summary.diff You can access the detailed information using jcmd again: jcmd <pid> VM.native_memory detail Java object layout \u00b6 Provides a good guide to the size of the object header in Java and what it is made up of, for 64bit (compressed oops on and off) and 32 bit JVM. https://gist.github.com/arturmkrtchyan/43d6135e8a15798cc46c Excellent guide to memory layout: http://psy-lob-saw.blogspot.com/2013/05/know-thy-java-object-memory-layout.html The tool jol is a library that can be used to identify the expected size of an object. Here we see the output for testing with jol on a 64bit compressed oops JVM. public final class MyClassSingleInt { public int value ; } com . bvb . MyClassSingleInt object internals : OFFSET SIZE TYPE DESCRIPTION VALUE 0 12 ( object header ) N / A 12 4 int MyClassSingleInt . value N / A Instance size : 16 bytes Space losses : 0 bytes internal + 0 bytes external = 0 bytes total public final class MyClassTwoInts { public int int1 ; public int int2 ; } com . bvb . MyClassTwoInts object internals : OFFSET SIZE TYPE DESCRIPTION VALUE 0 12 ( object header ) N / A 12 4 int MyClassTwoInts . int1 N / A 16 4 int MyClassTwoInts . int2 N / A 20 4 ( loss due to the next object alignment ) Instance size : 24 bytes Space losses : 0 bytes internal + 4 bytes external = 4 bytes total You can see that the second object with two ints, each of size 4 bytes, will loose a total of 4 bytes due to the alignment of the object on 8 byte boundaries. Compressed Oops \u00b6 Oops stands for ordinary object pointer and refers to the object references in the JVM. On 64bit hardware a pointer is sized at 64 bits, whereas in the 32bit world obviously 32bits. 32 bit means the addressable memory is 4GB. 64 bit means the addressable memory is 2^64 bytes, which is a lot. The use of 64bit pointers in the JVM incurs a performance penalty due to the extra data that uses up valuable space in the CPU caches. Java Performance the Definitive Guide lists the penalty as being 5-20% for moving to 64bit from 32bit. In order to get round this potential performance issue the JVM uses a trick that increases performance. It stores what is really a 35bit pointer in a 32bit memory location/register. Then when actually using this pointer it shifts it 3 places to the left. This means obviously that the first three bits are always zero for every pointer. 35 bit means the addressable memory is 32GB. As the first three places are always zero, the JVM is only able to reference memory that is divisible by 8. Objects in the 32bit and 64bit JVM are already aligned on a 8-byte boundary and therefore this additional overhead should not make any difference. Heaps <32GB use compressed oops by default since a version of Java 7. Heaps over 32GB revert to using the 64 bit pointers and therefore are most likely slower, even if the heap itself is only using (as an example) 500MB extra over 32GB. Enable remote debugging \u00b6 Java 8 and before \u00b6 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 Java 9+ \u00b6 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 Enable JMX without auth \u00b6 Warning don't expose this to the world Commands to enable Jmx without any authentication -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=[jmx port] -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=<hostname or ip used to connect to the remote server> Sometimes it happens that the ip picked up automatically for hostname above is 127.0.0.1 and therefore when connecting remotely it will seem to connect but will then fail.","title":"JVM"},{"location":"coding/jvm/jvm/#child-pages","text":"JVM Flags","title":"Child pages"},{"location":"coding/jvm/jvm/#java-native-memory","text":"Stats were added in Java 8 when the permgen data was moved off heap. Enabled by setting the option: -XX:NativeMemoryTracking=off|summary|details If you enable the summary or detailed information it is then possible to capture the stats using jcmd: jcmd <pid> VM.native_memory_summary It is also possible to set a baseline and then produce a diff using jcmd Start app and capture baseline jcmd <pid> VM.native_memory baseline Then you can produce a diff jcmd <pid> VM.native_memory summary.diff You can access the detailed information using jcmd again: jcmd <pid> VM.native_memory detail","title":"Java native memory"},{"location":"coding/jvm/jvm/#java-object-layout","text":"Provides a good guide to the size of the object header in Java and what it is made up of, for 64bit (compressed oops on and off) and 32 bit JVM. https://gist.github.com/arturmkrtchyan/43d6135e8a15798cc46c Excellent guide to memory layout: http://psy-lob-saw.blogspot.com/2013/05/know-thy-java-object-memory-layout.html The tool jol is a library that can be used to identify the expected size of an object. Here we see the output for testing with jol on a 64bit compressed oops JVM. public final class MyClassSingleInt { public int value ; } com . bvb . MyClassSingleInt object internals : OFFSET SIZE TYPE DESCRIPTION VALUE 0 12 ( object header ) N / A 12 4 int MyClassSingleInt . value N / A Instance size : 16 bytes Space losses : 0 bytes internal + 0 bytes external = 0 bytes total public final class MyClassTwoInts { public int int1 ; public int int2 ; } com . bvb . MyClassTwoInts object internals : OFFSET SIZE TYPE DESCRIPTION VALUE 0 12 ( object header ) N / A 12 4 int MyClassTwoInts . int1 N / A 16 4 int MyClassTwoInts . int2 N / A 20 4 ( loss due to the next object alignment ) Instance size : 24 bytes Space losses : 0 bytes internal + 4 bytes external = 4 bytes total You can see that the second object with two ints, each of size 4 bytes, will loose a total of 4 bytes due to the alignment of the object on 8 byte boundaries.","title":"Java object layout"},{"location":"coding/jvm/jvm/#compressed-oops","text":"Oops stands for ordinary object pointer and refers to the object references in the JVM. On 64bit hardware a pointer is sized at 64 bits, whereas in the 32bit world obviously 32bits. 32 bit means the addressable memory is 4GB. 64 bit means the addressable memory is 2^64 bytes, which is a lot. The use of 64bit pointers in the JVM incurs a performance penalty due to the extra data that uses up valuable space in the CPU caches. Java Performance the Definitive Guide lists the penalty as being 5-20% for moving to 64bit from 32bit. In order to get round this potential performance issue the JVM uses a trick that increases performance. It stores what is really a 35bit pointer in a 32bit memory location/register. Then when actually using this pointer it shifts it 3 places to the left. This means obviously that the first three bits are always zero for every pointer. 35 bit means the addressable memory is 32GB. As the first three places are always zero, the JVM is only able to reference memory that is divisible by 8. Objects in the 32bit and 64bit JVM are already aligned on a 8-byte boundary and therefore this additional overhead should not make any difference. Heaps <32GB use compressed oops by default since a version of Java 7. Heaps over 32GB revert to using the 64 bit pointers and therefore are most likely slower, even if the heap itself is only using (as an example) 500MB extra over 32GB.","title":"Compressed Oops"},{"location":"coding/jvm/jvm/#enable-remote-debugging","text":"","title":"Enable remote debugging"},{"location":"coding/jvm/jvm/#java-8-and-before","text":"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005","title":"Java 8 and before"},{"location":"coding/jvm/jvm/#java-9","text":"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005","title":"Java 9+"},{"location":"coding/jvm/jvm/#enable-jmx-without-auth","text":"Warning don't expose this to the world Commands to enable Jmx without any authentication -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=[jmx port] -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=<hostname or ip used to connect to the remote server> Sometimes it happens that the ip picked up automatically for hostname above is 127.0.0.1 and therefore when connecting remotely it will seem to connect but will then fail.","title":"Enable JMX without auth"}]}